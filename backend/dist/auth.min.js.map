{"version":3,"sources":["auth.js"],"names":["bcrypt","require","users","registerUser","req","res","_req$body","username","password","usernameRegex","passwordRegex","hashedPassword","regeneratorRuntime","async","_context","prev","next","body","test","abrupt","status","json","message","awrap","hash","sent","stop","module","exports"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,YACjBC,MAAQ,GAERC,aAAe,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAV,EAFHF,EAAAa,KAAPV,EAEUD,EAFVC,SAAOC,EAEGF,EAFHE,SAEGC,EAAA,iBAKbC,EAAgB,uEALHH,GAAAC,GAAAC,EAAAS,KAAAX,IAAAG,EAAAQ,KAAAV,GAAA,CAAAM,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAAAd,EAAAe,OAAA,KAAAC,KAAA,CAAAC,QAAA,mCAAA,KAAA,EAAA,OAAAR,EAAAE,KAAA,EAAAJ,mBAAAW,MAIGvB,OAAAwB,KAJHhB,EAAA,KAAA,KAAA,EAAA,OAIbC,EAJaK,EAAAW,KAKbf,MAAAA,KAAAA,CAAAA,SAAAA,EALaF,SAKGG,IALHG,EAAAK,OAAA,SAAAd,EAAAe,OAOdb,KAADc,KAAcb,CAAAA,QAAd,kCAPe,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAY,WAAAC,OAAAC,QAAA,CAAAzB,aAAAA","file":"auth.min.js","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst users = []; // Simulating a database for now\r\n\r\nconst registerUser = async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  // Server-side validation for username and password\r\n  const usernameRegex = /^[a-zA-Z0-9]+$/;\r\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n  if (!username || !password || !usernameRegex.test(username) || !passwordRegex.test(password)) {\r\n    return res.status(400).json({ message: 'Invalid username or password.' });\r\n  }\r\n\r\n  // Hashing the password\r\n  const hashedPassword = await bcrypt.hash(password, 12);\r\n  users.push({ username, password: hashedPassword });\r\n\r\n  return res.status(201).json({ message: 'User registered successfully' });\r\n};\r\n\r\nmodule.exports = { registerUser };\r\n"]}